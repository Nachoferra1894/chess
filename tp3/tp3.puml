@startuml
'Pieces
interface Piece {
    - name: String
    + isActive(): boolean
    + getPosition(): Square
    + getColor(): string
    + getName(): string
}
Pawn --> CommonPiece
Bishop --> CommonPiece
Horse --> CommonPiece
King --> CommonPiece
Queen --> CommonPiece
Rook --> CommonPiece
Rule --> Piece

abstract class CommonPiece {
        - isAlive: Boolean
        - movesCount: Int
        + getColor(): PieceColor
        + hasBeenEaten()
        + isActive(): Boolean
        + makeMove()
        + isFirstMove(): Boolean
        + getMoveCount(): Int
        + resetMoves()
}
class Bishop implements Piece{
    - color: PieceColor
    - rules: List<Rule>
    + getName()
    + getCanMoveTo(sq: Square): Boolean
}
class Horse implements Piece{
    - color: PieceColor
    - rules: List<Rule>
    + getName()
    + getCanMoveTo(sq: Square): Boolean
}
class King implements Piece{
    - color: PieceColor
    - rules: List<Rule>
    + getName()
    + getCanMoveTo(sq: Square): Boolean
}
class Pawn implements Piece{
    - color: PieceColor
    - rules: List<Rule>
    + getName()
    + getCanMoveTo(sq: Square): Boolean
    + promoteTo(pz: Piece)
}
class Queen implements Piece{
    - color: PieceColor
    - rules: List<Rule>
    + getName()
    + getCanMoveTo(sq: Square): Boolean
}
class Rook implements Piece{
    - color: PieceColor
    - rules: List<Rule>
    + getName()
    + getCanMoveTo(sq: Square): Boolean
}
'Game objects
class Game {
    - board: Board
    - ruleController: RuleController
    - startTime: Timestamp
    - activeTurn: Player
    - players: Player[]
    - pieces: Piece[]
    + startGame()
    + move(py: Player,pc: Piece,sq: Square)
    + endGame(winner?: Player)
}
class BoardGenerator {
    + createBoard(columns,rows,pieces)
}
class PieceGenerator {
    + createPiece(name,color)
}
class PlayerGenerator{
    + createPlayer(name)
}
Player <-- PlayerGenerator
Board <-- BoardGenerator
Piece <-- PieceGenerator


interface Square {
    + isOccupied()
}
class PositionSquare implements Square{
    - row: Number
    - column: Number
    - piece?: Piece
    + getRow()
    + getColumn()
    + getPiece(): Piece
}
interface Board {
    + getSquareOccupation(sq: Square): Piece
}
class SquareBoard implements Board{
    - squares: Square[]
}
'class Timer {
'    - startGameTime: Timestamp
'    - maxTime: Timestamp
'    + resumeTimer()
'    + stopTimer()
'    + endGame()
'}

interface Player {
    - pieceColor: string
    + getCanMove(): Boolean
    + getTimeLeft(): Timestamp
    + makeMove(sqFrom: Square,sqTo: Square)
    + offerStalemate()
    + respondStalemate(): boolean
    + resign()
}
class HumanPlayer {
    - name: string
}
HumanPlayer ..|> Player
Game --*  Piece


Game *--  Board
Player --*  Game

'Rules
class RuleController {
    - endGameRule: CheckMateRule
    - tieRules: EndGameRule[]
    + checkForCheck(board: Board,sqFrom: Square,sqTo: Square,colorToCheck: PieceColor)
    + checkForCheckMate(board: Board,colorToCheck: PieceColor)
    + checkForTie(board: Board,colorToCheck: PieceColor)

}

RuleController *--  EndGameRule
Game *-- RuleController

interface EndGameRule {
    + hasGameFinished()
}
class StaleMateRule implements EndGameRule{
    + hasGameFinished()
}
class FiftyKingMoves implements EndGameRule{
    + hasGameFinished()
}
class CheckMateRule implements EndGameRule{
    + hasGameFinished()
}
interface Rule {
    + isPossible(pieces Piece[],board Board,possibleMovement: Movement): Boolean
}
IsOnCheckRule --> RuleController
Square --* Board
class IsOnCheckRule {
}
class MaxBoardRule implements Rule {
}
class NoPieceCrash implements Rule {
}
class CastleRule implements Rule {
}
class PassantCaptureRule implements Rule {
}
class PromoteRule implements Rule {
}
interface MoveRule extends Rule {
    - limit: <Optional> int
}
class HorizontalMoveRule implements MoveRule {
}
class VerticalMoveRule implements MoveRule {
}
class DiagonalMoveRule implements MoveRule {
}


@enduml